generator erd {
  provider = "prisma-erd-generator"
  output   = "erd.png"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @unique @default(autoincrement())
  name      String
  username  String   @unique
  email     String?  @unique
  password  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Sale      Sale[]

  @@map("users")
}

model Product {
  id            Int           @unique @default(autoincrement())
  name          String
  description   String?
  unitCost      Float
  salePrice     Float
  profitMargin  Float
  status        ProductStatus @default(ACTIVE)
  categoryId    Int
  stock         Int           @default(0)
  minStockLevel Int           @default(0)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  Sale          Sale[]

  category ProductCategory @relation("CategoryProducts", fields: [categoryId], references: [id])
  SaleItem SaleItem[]

  @@map("products")
}

model ProductCategory {
  id          Int                   @unique @default(autoincrement())
  name        String                @unique
  description String
  status      ProductCategoryStatus @default(ACTIVE)
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at")

  products Product[] @relation("CategoryProducts")

  @@map("product_categories")
}

model Customer {
  id    Int     @unique @default(autoincrement())
  name  String
  phone String?
  email String? @unique

  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at")

  sales Sale[]

  @@map("customers")
}

model Sale {
  id            Int            @unique @default(autoincrement())
  customerId    Int?
  customer      Customer?      @relation(fields: [customerId], references: [id])
  status        SaleStatus     @default(PAID)
  totalAmount   Decimal
  paymentMethod PaymentMethod? // preenchido só após o pagamento
  paidAt        DateTime? // preenchido quando for quitado

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")

  payments  Payment[] // pagamentos relacionados (se for parcelado, por exemplo)
  saleItems SaleItem[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  Product   Product?   @relation(fields: [productId], references: [id])
  productId Int?

  @@map("sales")
}

model Payment {
  id     Int           @unique @default(autoincrement())
  saleId Int
  sale   Sale          @relation(fields: [saleId], references: [id])
  amount Decimal
  method PaymentMethod
  paidAt DateTime      @default(now())

  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at")

  @@map("payments")
}

model SaleItem {
  id        Int @unique @default(autoincrement())
  saleId    Int
  productId Int

  quantity   Int
  unitPrice  Float
  totalPrice Float

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at")

  @@unique([saleId, productId]) // Evita duplicidade do mesmo produto na mesma venda

  @@map("sale_items")
}

// ENUMS
enum ProductStatus {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  DELETED  @map("DELETED")
}

enum ProductCategoryStatus {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  DELETED  @map("DELETED")
}

enum SaleStatus {
  PENDING  @map("PENDING")
  PAID     @map("PAID")
  CANCELED @map("CANCELED")
}

enum PaymentMethod {
  CASH        @map("CASH")
  CREDIT_CARD @map("CREDIT_CARD")
  DEBIT_CARD  @map("DEBIT_CARD")
  PIX         @map("PIX")
}
