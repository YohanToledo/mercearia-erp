generator erd {
  provider = "prisma-erd-generator"
  output   = "erd.png"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// =====================
/// Usuarios e permissoes
/// =====================

model User {
  id        Int      @id @unique @default(autoincrement()) @map("id")
  name      String   @map("name")
  username  String   @unique @map("username")
  email     String?  @unique @map("email")
  password  String   @map("password")
  roleId    Int      @map("role_id")
  active    Boolean  @default(true) @map("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  sales Sale[]
  role  Role   @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id          Int      @id @unique @default(autoincrement()) @map("id")
  name        String   @map("name")
  description String   @map("description")
  active      Boolean  @default(true) @map("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @unique @default(autoincrement()) @map("id")
  name        String   @map("name")
  description String   @map("description")
  resource    String   @map("resource")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  role Role[]

  @@map("permissions")
}

// model RolePermission {
//   id           Int      @id @unique @default(autoincrement()) @map("id")
//   roleId       Int      @map("role_id")
//   permissionId Int      @map("permission_id")
//   createdAt    DateTime @default(now()) @map("created_at")
//   updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

//   role       Role       @relation(fields: [roleId], references: [id])
//   permission Permission @relation(fields: [permissionId], references: [id])

//   @@map("role_permissions")
// }

/// =====================
/// Produto e categorias
/// =====================

model Product {
  id            Int           @id @unique @default(autoincrement()) @map("id")
  name          String        @map("name")
  description   String?       @map("description")
  unitCost      Decimal       @map("unit_cost")
  salePrice     Decimal       @map("sale_price")
  profitMargin  Decimal       @map("profit_margin")
  status        ProductStatus @default(ACTIVE) @map("status")
  categoryId    Int           @map("category_id")
  stock         Int           @default(0) @map("stock")
  minStockLevel Int           @default(0) @map("min_stock_level")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  category      ProductCategory @relation("CategoryProducts", fields: [categoryId], references: [id])
  saleItem      SaleItem[]
  stockMovement StockMovement[]
  PurchaseItem  PurchaseItem[]

  @@map("products")
}

model ProductCategory {
  id          Int                   @id @unique @default(autoincrement()) @map("id")
  name        String                @unique @map("name")
  description String                @map("description")
  status      ProductCategoryStatus @default(ACTIVE) @map("status")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at")

  products Product[] @relation("CategoryProducts")

  @@map("product_categories")
}

enum ProductStatus {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  DELETED  @map("DELETED")
}

enum ProductCategoryStatus {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  DELETED  @map("DELETED")
}

/// =====================
/// Clientes
/// =====================

model Customer {
  id     Int            @id @unique @default(autoincrement()) @map("id")
  name   String         @map("name")
  phone  String?        @map("phone")
  email  String?        @unique @map("email")
  status CustomerStatus @default(ACTIVE) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  sales Sale[]

  @@map("customers")
}

enum CustomerStatus {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  DELETED  @map("DELETED")
}

/// =====================
/// Vendas
/// =====================

model Sale {
  id            Int            @id @unique @default(autoincrement()) @map("id")
  customerId    Int?           @map("customer_id")
  customer      Customer?      @relation(fields: [customerId], references: [id])
  status        SaleStatus     @default(PAID) @map("status")
  totalAmount   Decimal        @map("total_amount")
  paymentMethod PaymentMethod? @map("payment_method")
  paidAt        DateTime?      @map("paid_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  payments  Payment[]
  saleItems SaleItem[]
  User      User       @relation(fields: [userId], references: [id])
  userId    Int        @map("user_id")

  @@map("sales")
}

model SaleItem {
  id        Int @id @unique @default(autoincrement()) @map("id")
  saleId    Int @map("sale_id")
  productId Int @map("product_id")

  quantity   Int     @map("quantity")
  unitPrice  Decimal @map("unit_price")
  totalPrice Decimal @map("total_price")

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([saleId, productId])
  @@map("sale_items")
}

enum SaleStatus {
  PENDING  @map("PENDING")
  PAID     @map("PAID")
  CANCELED @map("CANCELED")
}

/// =====================
/// Pagamentos
/// =====================

model Payment {
  id     Int           @id @unique @default(autoincrement()) @map("id")
  saleId Int           @map("sale_id")
  amount Decimal       @map("amount")
  method PaymentMethod @map("method")
  paidAt DateTime      @default(now()) @map("paid_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  sale Sale @relation(fields: [saleId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  CASH        @map("CASH")
  CREDIT_CARD @map("CREDIT_CARD")
  DEBIT_CARD  @map("DEBIT_CARD")
  PIX         @map("PIX")
}

/// =====================
/// Entradas e saidas
/// =====================

model Purchase {
  id          Int            @id @unique @default(autoincrement()) @map("id")
  supplierId  Int            @map("supplier_id")
  status      PurchaseStatus @default(PENDING) @map("status")
  totalAmount Decimal        @map("total_amount")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  supplier Supplier       @relation(fields: [supplierId], references: [id])
  items    PurchaseItem[]

  @@map("purchase")
}

model PurchaseItem {
  id         Int     @id @unique @default(autoincrement()) @map("id")
  purchaseId Int     @map("purchase_id")
  productId  Int     @map("product_id")
  quantity   Int     @map("quantity")
  unitCost   Decimal @map("unit_cost")

  purchase Purchase @relation(fields: [purchaseId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model StockMovement {
  id        Int          @id @unique @default(autoincrement()) @map("id")
  productId Int          @map("product_id")
  type      MovementType @map("type")
  quantity  Int          @map("quantity")
  createdAt DateTime     @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

enum MovementType {
  SALE
  PURCHASE
  ADJUSTMENT
  RETURN
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELED
}

/// =====================
/// Fornecedores
/// =====================

model Supplier {
  id          Int            @id @unique @default(autoincrement()) @map("id")
  name        String         @map("name")
  description String?        @map("description")
  phone       String?        @map("phone")
  email       String?        @map("email")
  status      SupplierStatus @map("status")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @updatedAt @map("updated_at")

  Purchase Purchase[]

  @@map("suppliers")
}

enum SupplierStatus {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  DELETED  @map("DELETED")
}

/// =====================
/// Unidades de Medida
/// =====================

model MeasureUnit {
  id        Int               @id @unique @default(autoincrement()) @map("id")
  name      String            @unique @map("name")
  symbol    MeasureUnitSymbol @map("symbol")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")

  @@map("measure_units")
}

enum MeasureUnitSymbol {
  KG
  L
  UN
}

/// =====================
/// Despesas
/// ===================== 

model Expense {
  id                Int       @id @default(autoincrement()) @map("id")
  description       String    @map("description")
  amount            Decimal   @map("amount")
  expenseCategoryId Int       @map("expense_category_id")
  paidAt            DateTime? @map("paid_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  category ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])

  @@map("expenses")
}

model ExpenseCategory {
  id          Int      @id @unique @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  description String   @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  expenses Expense[]

  @@map("expense_categories")
}
